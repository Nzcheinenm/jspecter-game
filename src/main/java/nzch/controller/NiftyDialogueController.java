package nzch.controller;


import de.lessvoid.nifty.Nifty;
import de.lessvoid.nifty.controls.Button;
import de.lessvoid.nifty.elements.Element;
import de.lessvoid.nifty.elements.render.TextRenderer;
import de.lessvoid.nifty.screen.Screen;
import de.lessvoid.nifty.screen.ScreenController;
import nzch.Jspectergame;
import nzch.character.CombatCharacter;
import nzch.character.Enemy;
import nzch.system.DialogueSystem;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ —á–µ—Ä–µ–∑ Nifty GUI
 */
public class NiftyDialogueController implements ScreenController {

    private Nifty nifty;
    private Screen screen;
    private Jspectergame game;

    // –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    private Element dialoguePanel;
    private Element npcNameText;
    private Element dialogueText;
    private Element optionsContainer;
    private Element hintText;

    // –ë–æ–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    private Element combatLayer;
    private Element combatInfoText;
    private Element turnInfoText;
    private Element actionHintText;
    private Element enemyCountText;
    private Element roundInfoText;

    // –ü–∞–Ω–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    private Element playerInfoPanel;
    private Element playerNameText;
    private Element playerHpText;
    private Element playerStatusText;
    private Element enemyListPanel;

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    private Button attackButton;
    private Button moveButton;
    private Button skillButton;
    private Button itemButton;
    private Button endTurnButton;

    // –õ–æ–≥ –±–æ—è
    private Element[] logLines;

    // –≠–ª–µ–º–µ–Ω—Ç—ã –≤—Ä–∞–≥–æ–≤ (–∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ)
    private Element[] enemyPanels;
    private Element[] enemyNameTexts;
    private Element[] enemyHpTexts;

    private DialogueSystem.DialogueNode currentNode;
    private String currentNPCName;

    // –ë–æ–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    private int currentRound = 1;

    @Override
    public void bind(Nifty nifty, Screen screen) {
        this.nifty = nifty;
        this.screen = screen;

        initializeUIElements();
        hideDialogue();
        hideCombatUI();
    }

    private void initializeUIElements() {
        // –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        dialoguePanel = screen.findElementByName("dialogue_panel");
        npcNameText = screen.findElementByName("npc_name");
        dialogueText = screen.findElementByName("dialogue_text");
        optionsContainer = screen.findElementByName("options_container");
        hintText = screen.findElementByName("hint_text");

        // –ë–æ–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        combatLayer = screen.findElementByName("combat_layer");
        combatInfoText = screen.findElementByName("combat_info");
        turnInfoText = screen.findElementByName("turn_info");
        actionHintText = screen.findElementByName("action_hint");
        enemyCountText = screen.findElementByName("enemy_count");
        roundInfoText = screen.findElementByName("round_info");

        // –ü–∞–Ω–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        playerInfoPanel = screen.findElementByName("player_info");
        playerNameText = screen.findElementByName("player_name");
        playerHpText = screen.findElementByName("player_hp");
        playerStatusText = screen.findElementByName("player_status");
        enemyListPanel = screen.findElementByName("enemy_list");

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        attackButton = screen.findNiftyControl("attack_button", Button.class);
        moveButton = screen.findNiftyControl("move_button", Button.class);
        skillButton = screen.findNiftyControl("skill_button", Button.class);
        itemButton = screen.findNiftyControl("item_button", Button.class);
        endTurnButton = screen.findNiftyControl("end_turn_button", Button.class);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ –±–æ—è
        logLines = new Element[5];
        for (int i = 0; i < 5; i++) {
            logLines[i] = screen.findElementByName("log_line_" + (i + 1));
        }

        // –ó–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)
        initializeEnemyElements();

        clearCombatLog();
    }

    private void initializeEnemyElements() {
        enemyPanels = new Element[5];
        enemyNameTexts = new Element[5];
        enemyHpTexts = new Element[5];

        for (int i = 0; i < 5; i++) {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—Ä–∞–≥–∞
            enemyPanels[i] = screen.findElementByName("enemy_panel_" + (i + 1));
            enemyNameTexts[i] = screen.findElementByName("enemy_name_" + (i + 1));
            enemyHpTexts[i] = screen.findElementByName("enemy_hp_" + (i + 1));

            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (enemyPanels[i] != null) {
                enemyPanels[i].hide();
            }
        }
    }

    @Override
    public void onStartScreen() {
    }

    @Override
    public void onEndScreen() {
    }

    // === –î–ò–ê–õ–û–ì–ò ===

    public void option1() {
        onOptionSelected(0);
    }

    public void option2() {
        onOptionSelected(1);
    }

    public void option3() {
        onOptionSelected(2);
    }

    public void setGame(Jspectergame game) {
        this.game = game;
    }

    public void showDialogue(String npcName, String dialogueKey) {
        if (dialoguePanel == null || game == null) return;

        DialogueSystem.DialogueNode startNode = game.getDialogueSystem().getDialogue(dialogueKey);
        if (startNode != null) {
            this.currentNPCName = npcName;
            this.currentNode = startNode;
            updateDialogueDisplay();
            dialoguePanel.show();
        }
    }

    private void updateDialogueDisplay() {
        if (currentNode == null) return;

        setText(npcNameText, currentNPCName);
        setText(dialogueText, extractDialogueText(currentNode.getText()));

        if (currentNode.hasOptions()) {
            optionsContainer.show();
            setText(hintText, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞");

            String[] options = currentNode.getOptions();
            for (int i = 0; i < Math.min(options.length, 3); i++) {
                Element optionElement = screen.findElementByName("option_" + (i + 1));
                if (optionElement != null) {
                    setText(optionElement, (i + 1) + ". " + options[i]);
                    optionElement.show();
                }
            }

            for (int i = options.length; i < 3; i++) {
                Element optionElement = screen.findElementByName("option_" + (i + 1));
                if (optionElement != null) {
                    optionElement.hide();
                }
            }
        } else {
            optionsContainer.hide();
            setText(hintText, "[–ü–†–û–ë–ï–õ] –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
        }
    }

    public void onOptionSelected(int optionIndex) {
        if (currentNode != null && currentNode.hasOptions()) {
            if (optionIndex >= 0 && optionIndex < currentNode.getOptions().length) {
                currentNode = currentNode.getNextNode(optionIndex);
                if (currentNode != null) {
                    updateDialogueDisplay();
                } else {
                    hideDialogue();
                    if (game != null) game.endDialogue();
                }
            }
        }
    }

    public void nextDialogue() {
        if (currentNode == null || currentNode.hasOptions()) return;
        hideDialogue();
        if (game != null) game.endDialogue();
    }

    public void hideDialogue() {
        if (dialoguePanel != null) dialoguePanel.hide();
        currentNode = null;
        currentNPCName = null;
    }

    // === –ë–û–ï–í–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ===

    public void showCombatUI() {
        if (combatLayer != null) {
            combatLayer.show();
            updateCombatInfo();
        }
    }

    public void hideCombatUI() {
        if (combatLayer != null) combatLayer.hide();
    }

    public void updateCombatInfo(String combatInfo, String turnInfo, String actionHint) {
        setText(combatInfoText, combatInfo);
        setText(turnInfoText, turnInfo);
        setText(actionHintText, actionHint);
        updateCombatInfo();
    }

    public void updateCombatInfo() {
        if (game != null && game.inCombat) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–∞–≥–æ–≤ –∏ —Ä–∞—É–Ω–¥
            int enemyCount = (int) game.combatCharacters.stream()
                    .filter(c -> c instanceof Enemy && c.isAlive())
                    .count();
            setText(enemyCountText, "–í—Ä–∞–≥–æ–≤: " + enemyCount);
            setText(roundInfoText, "–†–∞—É–Ω–¥: " + currentRound);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            CombatCharacter player = game.getPlayerCombatCharacter();
            if (player != null) {
                setText(playerNameText, player.getName());
                setText(playerHpText, "HP: " + player.getCurrentHealth() + "/" + player.getMaxHealth());
                setText(playerStatusText, player.isAlive() ? "‚úÖ –ì–æ—Ç–æ–≤" : "üíÄ –£–±–∏—Ç");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
            updateEnemyList();
        }
    }

    private void updateEnemyList() {
        if (enemyPanels == null) return;

        // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤—Ä–∞–≥–æ–≤
        for (Element panel : enemyPanels) {
            if (panel != null) {
                panel.hide();
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤
        int enemyIndex = 0;
        for (CombatCharacter character : game.combatCharacters) {
            if (character instanceof Enemy enemy && character.isAlive() && enemyIndex < enemyPanels.length) {

                if (enemyPanels[enemyIndex] != null) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
                    enemyPanels[enemyIndex].show();

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if (enemyNameTexts[enemyIndex] != null) {
                        String statusIcon = enemy.getCurrentHealth() < enemy.getMaxHealth() * 0.5 ? " üí¢" : "";
                        setText(enemyNameTexts[enemyIndex], enemy.getName() + statusIcon);
                    }

                    if (enemyHpTexts[enemyIndex] != null) {
                        setText(enemyHpTexts[enemyIndex], "HP: " + enemy.getCurrentHealth() + "/" + enemy.getMaxHealth());
                    }

                    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç HP
                    if (enemy.getCurrentHealth() < enemy.getMaxHealth() * 0.3) {
                        enemyPanels[enemyIndex].setStyle("enemy_critical");
                    } else if (enemy.getCurrentHealth() < enemy.getMaxHealth() * 0.6) {
                        enemyPanels[enemyIndex].setStyle("enemy_wounded");
                    } else {
                        enemyPanels[enemyIndex].setStyle("enemy_healthy");
                    }
                }

                enemyIndex++;
            }
        }
    }

    // === –î–ï–ô–°–¢–í–ò–Ø –í –ë–û–Æ ===

    public void attackAction() {
        if (game != null && game.inCombat) {
            addCombatLog("–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å...");
            setText(actionHintText, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏");
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏
        }
    }

    public void moveAction() {
        if (game != null && game.inCombat) {
            addCombatLog("–í—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è...");
            setText(actionHintText, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è");
            if (game.gridSystem != null && game.currentTurnCharacter != null) {
                game.gridSystem.highlightMovementRange(
                        game.currentTurnCharacter.getPosition(),
                        game.currentTurnCharacter.getMovementRange()
                );
            }
        }
    }

    public void skillAction() {
        addCombatLog("–£–º–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        setText(actionHintText, "–£–º–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ");
    }

    public void itemAction() {
        addCombatLog("–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        setText(actionHintText, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ");
    }

    public void endTurnAction() {
        if (game != null && game.inCombat) {
            addCombatLog("–í—ã –∑–∞–≤–µ—Ä—à–∞–µ—Ç–µ —Å–≤–æ–π —Ö–æ–¥");
            if (game.gridSystem != null) {
                game.gridSystem.hideMovementRange();
            }
            game.endCurrentTurn();
        }
    }

    // === –õ–û–ì –ë–û–Ø ===

    public void addCombatLog(String message) {
        if (logLines == null) return;

        // –°–¥–≤–∏–≥–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
        for (int i = logLines.length - 2; i >= 0; i--) {
            if (logLines[i] != null && logLines[i + 1] != null) {
                TextRenderer currentRenderer = logLines[i].getRenderer(TextRenderer.class);
                TextRenderer nextRenderer = logLines[i + 1].getRenderer(TextRenderer.class);
                if (currentRenderer != null && nextRenderer != null) {
                    nextRenderer.setText(currentRenderer.getOriginalText());
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (logLines[0] != null) {
            setText(logLines[0], "> " + message);
        }
    }

    public void clearCombatLog() {
        if (logLines != null) {
            for (Element line : logLines) {
                if (line != null) {
                    setText(line, "");
                }
            }
        }
    }

    public void setRound(int round) {
        this.currentRound = round;
        updateCombatInfo();
    }

    public void updateTurnInfo(String characterName, int health, String status) {
        String turnText = "–•–æ–¥: " + characterName + " (HP: " + health + ") - " + status;
        setText(turnInfoText, turnText);
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    private void setText(Element element, String text) {
        if (element != null) {
            TextRenderer renderer = element.getRenderer(TextRenderer.class);
            if (renderer != null) renderer.setText(text);
        }
    }

    private String extractDialogueText(String fullText) {
        return fullText.contains(":") ? fullText.split(":", 2)[1].trim() : fullText;
    }

    public boolean isDialogueVisible() {
        return dialoguePanel != null && dialoguePanel.isVisible();
    }
}